
import mysql.connector

class TechBurger:
    def __init__(self):
        self.owner_id = "admin"
        self.owner_password = "techburger123"
        self.db_connection = self.connect_db()

    def connect_db(self):
        try:
            conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="rio2603",
                database="techburger"
            )
            return conn
        except mysql.connector.Error as e:
            print(f"‚ùå Database Connection Failed: {e}")
            exit()

    def display_welcome(self):
        print("\nüçîüî• Welcome to TECH BURGER! üî•üçî")
        print("Where taste meets technology! üòã\n")

    def get_user_role(self):
        print("Are you a...\n")
        print("1Ô∏è‚É£ Hungry Customer (No login needed, just order and eat! üçü)")
        print("2Ô∏è‚É£ Mighty Shop Owner (Login required! üè™)")
        print("3Ô∏è‚É£ Just Browsing... (Exit üö™)")
        
        choice = input("\nEnter your choice (1/2/3): ")
        return choice

    def owner_login(self):
        print("\nüîë Welcome, Mighty Shop Owner! Please log in.")
        user_id = input("Enter Owner ID: ")
        password = input("Enter Password: ")

        if user_id == self.owner_id and password == self.owner_password:
            print("\n‚úÖ Access Granted! Welcome, Boss! üèÜ")
            return True
        else:
            print("\n‚ùå Access Denied! Are you an imposter? ü§®")
            return False

    def display_menu(self):
        cursor = self.db_connection.cursor()
        cursor.execute("SELECT id, name, price FROM menu")
        items = cursor.fetchall()

        print("\nüçΩÔ∏è MENU üçΩÔ∏è")
        for item in items:
            print(f"{item[0]}. {item[1]} - ‚Çπ{item[2]}")
        return items

    def add_menu_item(self):
        name = input("\nEnter new item name: ")
        price = float(input("Enter price: "))

        cursor = self.db_connection.cursor()
        cursor.execute("INSERT INTO menu (name, price) VALUES (%s, %s)", (name, price))
        self.db_connection.commit()

        print(f"\n‚úÖ {name} added to the menu!")

    def update_menu_item(self):
        self.display_menu()
        item_id = input("\nEnter item ID to update price: ")
        new_price = float(input("Enter new price: "))

        cursor = self.db_connection.cursor()
        cursor.execute("UPDATE menu SET price = %s WHERE id = %s", (new_price, item_id))
        self.db_connection.commit()

        print("\n‚úÖ Price Updated Successfully!")

    def delete_menu_item(self):
        self.display_menu()
        item_id = input("\nEnter item ID to delete: ")

        cursor = self.db_connection.cursor()
        cursor.execute("DELETE FROM menu WHERE id = %s", (item_id,))
        self.db_connection.commit()

        print("\n‚úÖ Item Removed from Menu!")

    def view_orders(self):
        cursor = self.db_connection.cursor()
        cursor.execute("SELECT orders.id, menu.name, orders.quantity, orders.total_price FROM orders "
                       "JOIN menu ON orders.item_id = menu.id")
        orders = cursor.fetchall()
        for order in orders:
                print(f"orders_ID: {order[0]}  Name:{order[1]}   quantity:{2}   total_price:{order[3]}\n")
        bill_filename = f"order.txt"
        with open(bill_filename, "w",encoding="utf-8") as bill_file:
            bill_file.write("üçîüî• TECH BURGER orders üî•üçî\n")
            bill_file.write("---------------------------------\n")
            for order in orders:
                bill_file.write(f"orders_ID: {order[0]}  Name:{order[1]}   quantity:{2}   total_price:{order[3]}\n")
            bill_file.write("---------------------------------\n")
        print(f"üìú All Orders  saved as {bill_filename} üìú")

    def clear_orders(self):
        cursor = self.db_connection.cursor()
        cursor.execute("DELETE FROM orders")
        self.db_connection.commit()

        print("\n‚úÖ All orders have been cleared!")
    def cancel_order(self):
        self.view_orders()
        order_id = input("\nEnter the Order ID to cancel: ")

        cursor = self.db_connection.cursor()
        cursor.execute("SELECT * FROM orders WHERE id = %s", (order_id,))
        order = cursor.fetchone()

        if order:
            cursor.execute("DELETE FROM orders WHERE id = %s", (order_id,))
            self.db_connection.commit()
            print(f"\n‚úÖ Order ID {order_id} has been canceled successfully!")
        else:
            print("\n‚ùå Invalid Order ID! Please try again.")

    def order_item(self):
        self.display_menu()
        order_id = input("\nEnter the item number to order: ")
        quantity = int(input("Enter quantity: "))

        cursor = self.db_connection.cursor()
        cursor.execute("SELECT name, price FROM menu WHERE id = %s", (order_id,))
        item = cursor.fetchone()

        if item:
            total_price = item[1] * quantity
            print(f"\nüõí Ordered: {item[0]} (x{quantity}) - Total: ‚Çπ{total_price}")

            cursor.execute("INSERT INTO orders (item_id, quantity, total_price) VALUES (%s, %s, %s)",
                           (order_id, quantity, total_price))
            self.db_connection.commit()
            bill_filename = f"Bill.txt"
            with open(bill_filename, "w",encoding="utf-8") as bill_file:
                bill_file.write("üçîüî• TECH BURGER BILL üî•üçî\n")
                bill_file.write("---------------------------------\n")
                bill_file.write(f"Item: {item[0]}\n")
                bill_file.write(f"Quantity: {quantity}\n")
                bill_file.write(f"Total Price: ‚Çπ{total_price}\n")
                bill_file.write("---------------------------------\n")
                bill_file.write("Thank you for ordering from Tech Burger!\n")
            print(f"üìÑ Bill saved as {bill_filename}")

            print("\n‚úÖ Order Placed Successfully!\n")
        else:
            print("\n‚ùå Invalid Item! Try again.")
            
   

    def start(self):
        self.display_welcome()
        while True:
            choice = self.get_user_role()

            if choice == "1":
                while True:
                    print("\n1Ô∏è‚É£ View Menu")
                    print("2Ô∏è‚É£ Place Order")
                    print("3Ô∏è‚É£ View Orders")
                    print("4Ô∏è‚É£ Cancel Order")
                    print("5Ô∏è‚É£ Exit")

                    customer_choice = input("\nEnter your choice: ")

                    if customer_choice == "1":
                        self.display_menu()
                    elif customer_choice == "2":
                        self.order_item()
                    elif customer_choice == "3":
                        self.view_orders()
                    elif customer_choice == "4":
                        self.cancel_order()
                    elif customer_choice == "5":
                        print("\nüëã Thank you for visiting Tech Burger! üçî")
                        break
                    else:
                        print("\n‚ùå Invalid Choice! Try again.")

            elif choice == "2":
                if self.owner_login():
                    while True:
                        print("\nüîπ Owner Menu üîπ")
                        print("1Ô∏è‚É£ View Menu")
                        print("2Ô∏è‚É£ Add New Item")
                        print("3Ô∏è‚É£ Update Item Price")
                        print("4Ô∏è‚É£ Delete Item")
                        print("5Ô∏è‚É£ View Orders")
                        print("6Ô∏è‚É£ Clear Orders")
                        print("7Ô∏è‚É£ Exit Owner Panel")

                        owner_choice = input("\nEnter your choice: ")

                        if owner_choice == "1":
                            self.display_menu()
                        elif owner_choice == "2":
                            self.add_menu_item()
                        elif owner_choice == "3":
                            self.update_menu_item()
                        elif owner_choice == "4":
                            self.delete_menu_item()
                        elif owner_choice == "5":
                            self.view_orders()
                        elif owner_choice == "6":
                            self.clear_orders()
                        elif owner_choice == "7":
                            print("\nüîí Exiting Owner Panel... Back to main menu.")
                            break
                        else:
                            print("\n‚ùå Invalid Choice! Try again.")

            elif choice == "3":
                print("\nüö™ Exiting... Come back when you're hungry! üçüüëã")
                break
            else:
                print("\n‚ùå Invalid choice! Try again!\n")

# Run the app
if __name__ == "__main__":
    app = TechBurger()
    app.start()

